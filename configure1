#!/bin/sh

# 默认参数
PREFIX="/usr/local"
LUA_VERSION="auto"
PYTHON_VERSION="auto"
HELP=false

# 解析命令行参数
for arg in "$@"; do
    case $arg in
        --prefix=*)
            PREFIX="${arg#*=}"
            shift
            ;;
        --with-lua-version=*)
            LUA_VERSION="${arg#*=}"
            shift
            ;;
        --with-python-version=*)
            PYTHON_VERSION="${arg#*=}"
            shift
            ;;
        --help)
            HELP=true
            shift
            ;;
        *)
            echo "Unknown option: $arg" >&2
            exit 1
            ;;
    esac
done

if $HELP; then
    echo "Usage: $0 [options]"
    echo "Options:"
    echo "  --prefix=PATH         Installation prefix (default: /usr/local)"
    echo "  --with-lua-version=V  Specify Lua version (e.g. 5.1, 5.3, 5.4)"
    echo "  --with-python-version=V Specify Python version (e.g. 3.8, 3.10)"
    echo "  --help                Show this help message"
    exit 0
fi

# 检测平台
UNAME=$(uname -s)
if [ "$UNAME" = "Linux" ]; then
    PLATFORM="linux"
    LIB_EXT="so"
elif [ "$UNAME" = "Darwin" ]; then
    PLATFORM="macos"
    LIB_EXT="dylib"
elif echo "$UNAME" | grep -i "MINGW" >/dev/null || echo "$UNAME" | grep -i "CYGWIN" >/dev/null; then
    PLATFORM="windows"
    LIB_EXT="dll"
    # 修正 Windows 路径格式
    PREFIX=$(cygpath -m "$PREFIX")
else
    PLATFORM="unknown"
    LIB_EXT="so"
    echo "Warning: Unsupported platform '$UNAME', assuming Linux-like behavior" >&2
fi

# 检测Lua版本
if [ "$LUA_VERSION" = "auto" ]; then
    if command -v lua >/dev/null 2>&1; then
        LUA_VERSION=$(lua -v 2>&1 | awk '{print $2}' | cut -d. -f1,2)
    elif command -v lua5.4 >/dev/null 2>&1; then
        LUA_VERSION="5.4"
    elif command -v lua5.3 >/dev/null 2>&1; then
        LUA_VERSION="5.3"
    elif command -v lua5.2 >/dev/null 2>&1; then
        LUA_VERSION="5.2"
    elif command -v lua5.1 >/dev/null 2>&1; then
        LUA_VERSION="5.1"
    else
        echo "Error: Lua not found" >&2
        exit 1
    fi
fi

# 检测Python版本
if [ "$PYTHON_VERSION" = "auto" ]; then
    if command -v python3 >/dev/null 2>&1; then
        PYTHON_VERSION=$(python3 -V 2>&1 | awk '{print $2}' | cut -d. -f1,2)
    elif command -v python >/dev/null 2>&1; then
        PYTHON_VERSION=$(python -V 2>&1 | awk '{print $2}' | cut -d. -f1,2)
    else
        echo "Error: Python not found" >&2
        exit 1
    fi
fi

# 计算安装路径
MODULE_DIR="luapython"  # 项目专属目录

if [ "$PLATFORM" = "windows" ]; then
    # Windows 路径
    LUA_LIB_DIR="$PREFIX/lua/$LUA_VERSION"
    LUA_SHARE_DIR="$PREFIX/lua/$LUA_VERSION"
else
    # Unix-like 路径
    LUA_LIB_DIR="$PREFIX/lib/lua/$LUA_VERSION"
    LUA_SHARE_DIR="$PREFIX/share/lua/$LUA_VERSION"
fi

# 生成Makefile
cat > Makefile <<EOF
# Generated by configure script
PLATFORM    = $PLATFORM
LUA_VERSION = $LUA_VERSION
PYTHON_VERSION = $PYTHON_VERSION
PREFIX      = $PREFIX
LIB_EXT     = $LIB_EXT
MODULE_DIR  = $MODULE_DIR

# Installation paths
LUA_LIB_DIR = \$(PREFIX)/lib/lua/\$(LUA_VERSION)
LUA_SHARE_DIR = \$(PREFIX)/share/lua/\$(LUA_VERSION)

# Project-specific paths
PROJECT_LIB_DIR = \$(LUA_LIB_DIR)/\$(MODULE_DIR)
PROJECT_SHARE_DIR = \$(LUA_SHARE_DIR)/\$(MODULE_DIR)

# Windows-specific adjustments
ifeq (\$(PLATFORM),windows)
LUA_LIB_DIR = \$(PREFIX)/lua/\$(LUA_VERSION)
LUA_SHARE_DIR = \$(PREFIX)/lua/\$(LUA_VERSION)
PROJECT_LIB_DIR = \$(LUA_LIB_DIR)/\$(MODULE_DIR)
PROJECT_SHARE_DIR = \$(LUA_SHARE_DIR)/\$(MODULE_DIR)
endif

install:
ifeq (\$(PLATFORM),windows)
	@echo "Installing for Windows..."
	@if not exist "\$(PROJECT_LIB_DIR)" mkdir "\$(PROJECT_LIB_DIR)"
	@if not exist "\$(PROJECT_SHARE_DIR)" mkdir "\$(PROJECT_SHARE_DIR)"
	copy /Y luapython.\$(LIB_EXT) "\$(PROJECT_LIB_DIR)"
	copy /Y convert_pre.lua "\$(PROJECT_SHARE_DIR)"
	copy /Y python_init.lua "\$(PROJECT_SHARE_DIR)"
else
	@echo "Installing for Unix-like system..."
	mkdir -p \$(PROJECT_LIB_DIR)
	mkdir -p \$(PROJECT_SHARE_DIR)
	install -m 755 luapython.\$(LIB_EXT) \$(PROJECT_LIB_DIR)
	install -m 644 convert_pre.lua \$(PROJECT_SHARE_DIR)
	install -m 644 python_init.lua \$(PROJECT_SHARE_DIR)
endif
	@echo
	@echo "Installation complete!"
	@echo "Lua C module installed to: \$(PROJECT_LIB_DIR)/luapython.\$(LIB_EXT)"
	@echo "Lua modules installed to: \$(PROJECT_SHARE_DIR)"
	@echo
	@echo "You can now use the module in Lua with:"
	@echo "  local convert_pre = require '\$(MODULE_DIR).convert_pre'"
	@echo "  local python_init = require '\$(MODULE_DIR).python_init'"

uninstall:
ifeq (\$(PLATFORM),windows)
	@echo "Uninstalling for Windows..."
	del /Q "\$(PROJECT_LIB_DIR)\\luapython.\$(LIB_EXT)" 2>nul
	del /Q "\$(PROJECT_SHARE_DIR)\\convert_pre.lua" 2>nul
	del /Q "\$(PROJECT_SHARE_DIR)\\python_init.lua" 2>nul
	rmdir "\$(PROJECT_LIB_DIR)" 2>nul
	rmdir "\$(PROJECT_SHARE_DIR)" 2>nul
else
	@echo "Uninstalling for Unix-like system..."
	rm -f \$(PROJECT_LIB_DIR)/luapython.\$(LIB_EXT)
	rm -f \$(PROJECT_SHARE_DIR)/convert_pre.lua
	rm -f \$(PROJECT_SHARE_DIR)/python_init.lua
	rmdir \$(PROJECT_LIB_DIR) 2>/dev/null || true
	rmdir \$(PROJECT_SHARE_DIR) 2>/dev/null || true
endif
	@echo "Uninstall completed"

.PHONY: install uninstall
EOF

echo "Configuration:"
echo "  Platform:      $PLATFORM"
echo "  Lua version:   $LUA_VERSION"
echo "  Python version: $PYTHON_VERSION"
echo "  Install prefix: $PREFIX"
echo "  Module directory: $MODULE_DIR"
echo
echo "Makefile generated successfully."
echo "Now you can run:"
echo "  make install    # to install the module"
echo "  make uninstall  # to remove the module"